akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/data/journal"

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/data/snapshots"


localStores {
    akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
    akka.persistence.journal.leveldb.dir = "target/localStores/journal"
    akka.persistence.journal.leveldb.compaction-intervals {
        simple-persistent-actor = 1000
        "*" = 5000
    }

    akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresDemo {
    akka.persistence.journal.plugin = "jdbc-journal"
    akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

    # this is used by jdbc-journal
    akka-persistence-jdbc {
        shared-databases {
            slick {
                profile = "slick.jdbc.PostgresProfile$"
                db {
                    numThreads = 10
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/rtjvm" # /sql/create-database.sql
                    user = "docker" # from docker-compose.yml
                    password = "docker" # from docker-compose.yml
                }
            }
        }
    }

    jdbc-journal {
      use-shared-db = "slick" # name in line 27 (akka-persistence-jdbc.shared-databases.slick)
    }

    jdbc-snapshot-store {
        use-shared-db = "slick" # name in line 27 (akka-persistence-jdbc.shared-databases.slick)
    }
}

cassandraDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    # there are a lot of default values that cassandra-journal plugin
    # will already have configured

    # if you need to configure Cassandra for production in your own project
    # or at your job, go to the Akka-persistence Cassandra Github repository
    # (https://github.com/akka/akka-persistence-cassandra) and see all default values in
    # https://github.com/akka/akka-persistence-cassandra/blob/master/core/src/main/resources/reference.conf
}

customSerializerDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    akka.actor {
      serializers {
        java = "akka.serialization.JavaSerializer"
        javt = "part3_stores_serialization.UserRegistrationSerializer"
      }

      serialization-bindings {
        "part3_stores_serialization.UserRegistered" = javt
        # java serializer is used by default
      }

    }
}

eventAdapters {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            # create an adapter with any name e.g. `guitar-inventory-enhancer`
            #fully qualified name of the class. Put attention to `$` before adapter class name
            # `$` indicates that `EventAdapters$GuitarReadEventAdapter` is a inner class
            guitar-inventory-enhancer = "part4_practices.EventAdapters$GuitarReadEventAdapter"
        }

        event-adapter-bindings {
            # Indicate the event that you want to convert
            "part4_practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
        }
    }
}

detachingModels {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
          detach-adapter = "part4_practices.ModelAdapter"
        }

        event-adapter-bindings {
          "part4_practices.DomainModel$CouponApplied" = detach-adapter
          "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
          "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
        }
    }
}